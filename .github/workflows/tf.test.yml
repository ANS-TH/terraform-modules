######################################################
# Terraform Test Workflow
#
# Performs a simple test to ensure that Terraform is:
# - Formatted correctly
# - Initializes without a backend
# - Validates
#
# ###OMITTED###
# # permissions block is required
# # to ensure it can write to checks and PRs
# jobs:
#   module_test_job:
#     uses: ./.github/workflows/tf.test.yml
#     with:
#       tf_path: path/to/module
#     permissions:
#       contents: read
#       checks: write
#       pull-requests: write
# ###OMITTED###
######################################################

name: terraform - test

# workflow triggers
on:
  # enables manual runs
  workflow_call:
    inputs:
      tf_version:
        required: false
        type: string
        description: Terraform version to use.
        default: latest
      tf_path:
        required: false
        type: string
        description: Path to the location of your Terraform configuration or module.
        default: ${{ vars.GITHUB_WORKSPACE }}
      reviewdog_pr_reporter:
        required: false
        type: string
        description: The reporter to use with Reviewdog and PR.
        default: github-pr-review

# set global pipeline env vars
env:
  tf_version: ${{ inputs.tf_version }}
  tf_path: ${{ inputs.tf_path }}

# workflow
jobs:
  test:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ${{ env.tf_path }}
    permissions:
      contents: read
      checks: write
      pull-requests: write
    env:
      TF_IN_AUTOMATION: true
      TF_INPUT: false
      TF_CLI_ARGS_init: -backend=false
    steps:
      # checkout
      - uses: actions/checkout@v3

      # setup
      - name: setup terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: ${{ env.tf_version }}

      # base checks
      - name: terraform fmt
        run: terraform fmt -check
        continue-on-error: true
      - name: terraform init
        run: terraform init
      - name: terraform validate
        run: terraform validate

      # custom checks (push)
      - name: tflint
        uses: reviewdog/action-tflint@v1
        with:
          working_directory: ${{ env.tf_path }}
          filter_mode: nofilter
          reporter: github-check
          fail_on_error: false
          tflint_init: true
        if: github.event_name != 'pull_request'
      - name: tfsec
        uses: reviewdog/action-tfsec@v1
        with:
          working_directory: ${{ env.tf_path }}
          filter_mode: nofilter
          reporter: github-check
          fail_on_error: true
        if: github.event_name != 'pull_request'

      # custom checks (pr)
      - name: tflint-pr
        uses: reviewdog/action-tflint@v1
        with:
          working_directory: ${{ env.tf_path }}
          filter_mode: nofilter
          reporter: ${{ inputs.reviewdog_pr_reporter }}
          fail_on_error: false
          tflint_init: true
        if: github.event_name == 'pull_request'
      - name: tfsec-pr
        uses: reviewdog/action-tfsec@v1
        with:
          working_directory: ${{ env.tf_path }}
          filter_mode: nofilter
          reporter: ${{ inputs.reviewdog_pr_reporter }}
          fail_on_error: true
        if: github.event_name == 'pull_request'
